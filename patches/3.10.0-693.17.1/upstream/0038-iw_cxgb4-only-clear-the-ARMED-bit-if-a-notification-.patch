From 5c81e46c1e90a268d52d8edd6c61a33f2b5bed51 Mon Sep 17 00:00:00 2001
From: Steve Wise <swise@opengridcomputing.com>
Date: Thu, 30 Nov 2017 09:41:56 -0800
Subject: [PATCH 38/64] iw_cxgb4: only clear the ARMED bit if a notification is
 needed

commit 335ebf6fa35ca1c59b73f76fad19b249d3550e86
Author: Steve Wise <swise@opengridcomputing.com>
Date:   Thu Nov 30 09:41:56 2017 -0800

    iw_cxgb4: only clear the ARMED bit if a notification is needed

    In __flush_qp(), the CQ ARMED bit was being cleared regardless of
    whether any notification is actually needed.  This resulted in the iser
    termination logic getting stuck in ib_drain_sq() because the CQ was not
    marked ARMED and thus the drain CQE notification wasn't triggered.

    This new bug was exposed when this commit was merged:

    commit cbb40fadd31c ("iw_cxgb4: only call the cq comp_handler when the
    cq is armed")

    Signed-off-by: Steve Wise <swise@opengridcomputing.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
---
 drivers/infiniband/hw/cxgb4/qp.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/infiniband/hw/cxgb4/qp.c b/drivers/infiniband/hw/cxgb4/qp.c
index 718ae35ee130..934388af8303 100644
--- a/drivers/infiniband/hw/cxgb4/qp.c
+++ b/drivers/infiniband/hw/cxgb4/qp.c
@@ -1286,21 +1286,21 @@ static void __flush_qp(struct c4iw_qp *qhp, struct c4iw_cq *rchp,
 	spin_unlock_irqrestore(&rchp->lock, flag);
 
 	if (schp == rchp) {
-		if (t4_clear_cq_armed(&rchp->cq) &&
-		    (rq_flushed || sq_flushed)) {
+		if ((rq_flushed || sq_flushed) &&
+		    t4_clear_cq_armed(&rchp->cq)) {
 			spin_lock_irqsave(&rchp->comp_handler_lock, flag);
 			(*rchp->ibcq.comp_handler)(&rchp->ibcq,
 						   rchp->ibcq.cq_context);
 			spin_unlock_irqrestore(&rchp->comp_handler_lock, flag);
 		}
 	} else {
-		if (t4_clear_cq_armed(&rchp->cq) && rq_flushed) {
+		if (rq_flushed && t4_clear_cq_armed(&rchp->cq)) {
 			spin_lock_irqsave(&rchp->comp_handler_lock, flag);
 			(*rchp->ibcq.comp_handler)(&rchp->ibcq,
 						   rchp->ibcq.cq_context);
 			spin_unlock_irqrestore(&rchp->comp_handler_lock, flag);
 		}
-		if (t4_clear_cq_armed(&schp->cq) && sq_flushed) {
+		if (sq_flushed && t4_clear_cq_armed(&schp->cq)) {
 			spin_lock_irqsave(&schp->comp_handler_lock, flag);
 			(*schp->ibcq.comp_handler)(&schp->ibcq,
 						   schp->ibcq.cq_context);
-- 
2.9.3

